/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.jinstaller.panels;

import java.awt.Cursor;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import org.jinstaller.InstallerFase;
import org.jinstaller.MainInstaller;
import org.jinstaller.util.FileUtil;
import org.jinstaller.util.Properties;

/**
 *
 * @author luis
 */
public class JPanelInstallaction extends javax.swing.JPanel implements InstallerFase {

    MainInstaller main;
    File InstallationFolder;
    File localFolder;

    /**
     * Creates new form JPanelStart
     */
    public JPanelInstallaction() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelMessage = new javax.swing.JLabel();
        jProgressBar = new javax.swing.JProgressBar();
        jLabelActualNumber = new javax.swing.JLabel();
        jLabelOf = new javax.swing.JLabel();
        jLabelTotal = new javax.swing.JLabel();
        jLabelFiles = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(650, 250));
        setMinimumSize(new java.awt.Dimension(650, 250));
        setPreferredSize(new java.awt.Dimension(650, 250));

        jLabelMessage.setText("Installing");

        jLabelActualNumber.setText("9");

        jLabelOf.setText("of");

        jLabelTotal.setText("100");

        jLabelFiles.setText("Files");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelMessage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelActualNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelOf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelTotal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelFiles)
                        .addGap(0, 457, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMessage)
                    .addComponent(jLabelActualNumber)
                    .addComponent(jLabelOf)
                    .addComponent(jLabelTotal)
                    .addComponent(jLabelFiles))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(125, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelActualNumber;
    private javax.swing.JLabel jLabelFiles;
    private javax.swing.JLabel jLabelMessage;
    private javax.swing.JLabel jLabelOf;
    private javax.swing.JLabel jLabelTotal;
    private javax.swing.JProgressBar jProgressBar;
    // End of variables declaration//GEN-END:variables

    public boolean onContinue() {
        return true;
    }

    public void prepare() {
        main.setCursor(Cursor.WAIT_CURSOR);
        setVisible(true);
        InstallationFolder = new File(Properties.getProperty("installaction-folder"));
        main.lock();

        startConfiguration();

    }

    private List<File> getFiles(File folder) {
        List<File> files = new ArrayList<File>();
        for (File f : folder.listFiles()) {
            files.add(f);
            if (f.isDirectory() && f.canRead()) {
                files.addAll(getFiles(f));
            }
        }
        return files;

    }

    public void setMainInstaller(MainInstaller main) {
        this.main = main;
    }

    public JPanel getPanel() {
        return this;
    }

    private void startConfiguration() {
        Runnable runnable = new Runnable() {

            public void run() {
                try {

                    //add de name of target folder to install
                    try {
                        InstallationFolder = new File(
                                InstallationFolder.getCanonicalPath()
                                + System.getProperty("file.separator")
                                + Properties.getProperty("target-folder"));
                    } catch (IOException ex) {
                        Logger.getLogger(JPanelFolderSelection.class.getName()).
                                log(Level.SEVERE, null, ex);
                    }
                    //change view messages
                    main.changeMessage("Preparing to install..");
                    main.changeTitle("Installing");

                    Logger.getLogger(JPanelInstallaction.class.getName()).
                            log(Level.INFO, "Installing on - {0}",
                            InstallationFolder.getCanonicalPath());
                    //set value of progress bar
                    jProgressBar.setValue(0);
                    jLabelMessage.setText("Collecting informations");
                    enableInformations(false);

                    File pathName = new File(".");

                    String folder = null;
                    try {
                        folder = pathName.getCanonicalPath()
                                + System.getProperty("file.separator")
                                + Properties.getProperty("data-folder");
                    } catch (IOException ex) {
                        Logger.getLogger(JPanelInstallaction.class.getName()).log(Level.SEVERE, null, ex);
                        System.exit(0);
                    }
                    //capture localfolder
                    localFolder = new File(folder);

                    pathName = new File(folder);
                    jProgressBar.setValue(50);

                    //retrieve all files to copy
                    List<File> files = getFiles(pathName);
                    jLabelTotal.setText(String.valueOf(files.size()));
                    jProgressBar.setValue(100);
                    main.changeMessage("Installing");

                    jLabelMessage.setText("Installing");

                    //copy files
                    int i = 0;
                    InstallationFolder.mkdir();

                    //set visibles counts
                    jLabelActualNumber.setText(String.valueOf(0));
                    enableInformations(true);
                    jProgressBar.setValue(0);

                    for (File f : files) {

                        //retrieve local path
                        String path = f.getCanonicalPath();

                        //retrieve only reference to file
                        path = path.replace(localFolder.getCanonicalPath(), "");

                        //create link to target file
                        File target = new File(
                                InstallationFolder.getCanonicalPath() + path);

                        if (f.isDirectory()) {
                            target.mkdir();
                        } else {
                            //copy file
                            FileUtil.copyFile(f, target);
                        }

                        i++;

                        jProgressBar.setValue(Math.round(i * 100 / files.size()));
                        jLabelActualNumber.setText(String.valueOf(i));
                    }

                    main.changeMessage("Configuring shortcuts..");

                    //closing values of informations
                    jLabelMessage.setText("");
                    enableInformations(false);
                    
                    //configure shortcuts..

                    //dependents O.S.
                    //TODO configure shortcuts
                    
                    main.changeMessage("Instalation is done!");
                    main.unlock();
                    main.forceContine();
                    main.setCursor(Cursor.DEFAULT_CURSOR);

                } catch (IOException ex) {
                    Logger.getLogger(JPanelInstallaction.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };

        new Thread(runnable).start();

    }

    private void enableInformations(boolean enable) {

        jLabelActualNumber.setVisible(enable);
        jLabelFiles.setVisible(enable);
        jLabelOf.setVisible(enable);
        jLabelTotal.setVisible(enable);

    }
}
